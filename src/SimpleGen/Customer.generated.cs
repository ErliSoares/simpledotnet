// <autogenerated>
//   This file was generated by T4 code generator DataClasses1.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

namespace Simple.Generator
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;

    [Table(Name = "dbo.Customers")]
    public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private string customerID;
        private string companyName;
        private string contactName;
        private string contactTitle;
        private string address;
        private string city;
        private string region;
        private string postalCode;
        private string country;
        private string phone;
        private string fax;
        private EntitySet<CustomerCustomerDemo> customerCustomerDemos;
        private EntitySet<Order> orders;
        
        public Customer()
        {
            this.customerCustomerDemos = new EntitySet<CustomerCustomerDemo>(this.AttachCustomerCustomerDemos, this.DetachCustomerCustomerDemos);
            this.orders = new EntitySet<Order>(this.AttachOrders, this.DetachOrders);
            this.OnCreated();
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;

        [Column(Name = "CustomerID", Storage = "customerID", CanBeNull = false, DbType = "NChar(5) NOT NULL", IsPrimaryKey = true)]
        public string CustomerID
        {
            get
            {
                return this.customerID;
            }
        
            set
            {
                if (this.customerID != value)
                {
                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging("CustomerID");
                    this.customerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

        [Column(Name = "CompanyName", Storage = "companyName", CanBeNull = false, DbType = "NVarChar(40) NOT NULL")]
        public string CompanyName
        {
            get
            {
                return this.companyName;
            }
        
            set
            {
                if (this.companyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging("CompanyName");
                    this.companyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

        [Column(Name = "ContactName", Storage = "contactName", CanBeNull = true, DbType = "NVarChar(30)")]
        public string ContactName
        {
            get
            {
                return this.contactName;
            }
        
            set
            {
                if (this.contactName != value)
                {
                    this.OnContactNameChanging(value);
                    this.SendPropertyChanging("ContactName");
                    this.contactName = value;
                    this.SendPropertyChanged("ContactName");
                    this.OnContactNameChanged();
                }
            }
        }

        [Column(Name = "ContactTitle", Storage = "contactTitle", CanBeNull = true, DbType = "NVarChar(30)")]
        public string ContactTitle
        {
            get
            {
                return this.contactTitle;
            }
        
            set
            {
                if (this.contactTitle != value)
                {
                    this.OnContactTitleChanging(value);
                    this.SendPropertyChanging("ContactTitle");
                    this.contactTitle = value;
                    this.SendPropertyChanged("ContactTitle");
                    this.OnContactTitleChanged();
                }
            }
        }

        [Column(Name = "Address", Storage = "address", CanBeNull = true, DbType = "NVarChar(60)")]
        public string Address
        {
            get
            {
                return this.address;
            }
        
            set
            {
                if (this.address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this.address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [Column(Name = "City", Storage = "city", CanBeNull = true, DbType = "NVarChar(15)")]
        public string City
        {
            get
            {
                return this.city;
            }
        
            set
            {
                if (this.city != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this.city = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

        [Column(Name = "Region", Storage = "region", CanBeNull = true, DbType = "NVarChar(15)")]
        public string Region
        {
            get
            {
                return this.region;
            }
        
            set
            {
                if (this.region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging("Region");
                    this.region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

        [Column(Name = "PostalCode", Storage = "postalCode", CanBeNull = true, DbType = "NVarChar(10)")]
        public string PostalCode
        {
            get
            {
                return this.postalCode;
            }
        
            set
            {
                if (this.postalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging("PostalCode");
                    this.postalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }

        [Column(Name = "Country", Storage = "country", CanBeNull = true, DbType = "NVarChar(15)")]
        public string Country
        {
            get
            {
                return this.country;
            }
        
            set
            {
                if (this.country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging("Country");
                    this.country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

        [Column(Name = "Phone", Storage = "phone", CanBeNull = true, DbType = "NVarChar(24)")]
        public string Phone
        {
            get
            {
                return this.phone;
            }
        
            set
            {
                if (this.phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging("Phone");
                    this.phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

        [Column(Name = "Fax", Storage = "fax", CanBeNull = true, DbType = "NVarChar(24)")]
        public string Fax
        {
            get
            {
                return this.fax;
            }
        
            set
            {
                if (this.fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging("Fax");
                    this.fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

        [Association(Name = "Customer_CustomerCustomerDemo", Storage = "customerCustomerDemos", ThisKey = "CustomerID", OtherKey = "CustomerID")]
        public EntitySet<CustomerCustomerDemo> CustomerCustomerDemos
        {
            get 
            {
                return this.customerCustomerDemos; 
            }
        
            set 
            { 
                this.customerCustomerDemos.Assign(value); 
            }
        }

        [Association(Name = "Customer_Order", Storage = "orders", ThisKey = "CustomerID", OtherKey = "CustomerID")]
        public EntitySet<Order> Orders
        {
            get 
            {
                return this.orders; 
            }
        
            set 
            { 
                this.orders.Assign(value); 
            }
        }
        
        protected virtual void SendPropertyChanging(string propertyName)
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
        
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        private void AttachCustomerCustomerDemos(CustomerCustomerDemo entity)
        {
            this.SendPropertyChanging("CustomerCustomerDemos");
            entity.Customer = this;
        }
        
        private void DetachCustomerCustomerDemos(CustomerCustomerDemo entity)
        {
            this.SendPropertyChanging("CustomerCustomerDemos");
            entity.Customer = null;
        }
        
        private void AttachOrders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Customer = this;
        }
        
        private void DetachOrders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Customer = null;
        }
        
        #region Extensibility methods
        
        partial void OnCreated();
        
        partial void OnLoaded();
        
        partial void OnValidate(ChangeAction action);
        
        partial void OnCustomerIDChanging(string value);
        
        partial void OnCustomerIDChanged();
        
        partial void OnCompanyNameChanging(string value);
        
        partial void OnCompanyNameChanged();
        
        partial void OnContactNameChanging(string value);
        
        partial void OnContactNameChanged();
        
        partial void OnContactTitleChanging(string value);
        
        partial void OnContactTitleChanged();
        
        partial void OnAddressChanging(string value);
        
        partial void OnAddressChanged();
        
        partial void OnCityChanging(string value);
        
        partial void OnCityChanged();
        
        partial void OnRegionChanging(string value);
        
        partial void OnRegionChanged();
        
        partial void OnPostalCodeChanging(string value);
        
        partial void OnPostalCodeChanged();
        
        partial void OnCountryChanging(string value);
        
        partial void OnCountryChanged();
        
        partial void OnPhoneChanging(string value);
        
        partial void OnPhoneChanged();
        
        partial void OnFaxChanging(string value);
        
        partial void OnFaxChanged();
        
        #endregion
    }
}
