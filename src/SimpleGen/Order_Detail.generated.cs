// <autogenerated>
//   This file was generated by T4 code generator DataClasses1.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

namespace Simple.Generator
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;

    [Table(Name = "dbo.[Order Details]")]
    public partial class Order_Detail : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private int orderID;
        private int productID;
        private decimal unitPrice;
        private short quantity;
        private float discount;
        private EntityRef<Order> order;
        private EntityRef<Product> product;
        
        public Order_Detail()
        {
            this.order = default(EntityRef<Order>);
            this.product = default(EntityRef<Product>);
            this.OnCreated();
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;

        [Column(Name = "OrderID", Storage = "orderID", CanBeNull = false, DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int OrderID
        {
            get
            {
                return this.orderID;
            }
        
            set
            {
                if (this.orderID != value)
                {
                    if (this.order.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging("OrderID");
                    this.orderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

        [Column(Name = "ProductID", Storage = "productID", CanBeNull = false, DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int ProductID
        {
            get
            {
                return this.productID;
            }
        
            set
            {
                if (this.productID != value)
                {
                    if (this.product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging("ProductID");
                    this.productID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }

        [Column(Name = "UnitPrice", Storage = "unitPrice", CanBeNull = false, DbType = "Money NOT NULL")]
        public decimal UnitPrice
        {
            get
            {
                return this.unitPrice;
            }
        
            set
            {
                if (this.unitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this.SendPropertyChanging("UnitPrice");
                    this.unitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        [Column(Name = "Quantity", Storage = "quantity", CanBeNull = false, DbType = "SmallInt NOT NULL")]
        public short Quantity
        {
            get
            {
                return this.quantity;
            }
        
            set
            {
                if (this.quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging("Quantity");
                    this.quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

        [Column(Name = "Discount", Storage = "discount", CanBeNull = false, DbType = "Real NOT NULL")]
        public float Discount
        {
            get
            {
                return this.discount;
            }
        
            set
            {
                if (this.discount != value)
                {
                    this.OnDiscountChanging(value);
                    this.SendPropertyChanging("Discount");
                    this.discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }

        [Association(Name = "Order_Order_Detail", Storage = "order", ThisKey = "OrderID", OtherKey = "OrderID", IsForeignKey = true)]
        public Order Order
        {
            get
            {
                return this.order.Entity;
            }
        
            set
            {
                Order previousValue = this.order.Entity;
                if (previousValue != value || !this.order.HasLoadedOrAssignedValue)
                {
                    this.SendPropertyChanging("Order");
        
                    if (previousValue != null)
                    {
                        this.order.Entity = null;
                        previousValue.Order_Details.Remove(this);
                    }
        
                    this.order.Entity = value;
        
                    if (value != null)
                    {
                        value.Order_Details.Add(this);
                        this.orderID = value.OrderID;
                    }
                    else
                    {
                        this.orderID = default(int);
                    }
        
                    this.SendPropertyChanged("Order");
                }
            }
        }

        [Association(Name = "Product_Order_Detail", Storage = "product", ThisKey = "ProductID", OtherKey = "ProductID", IsForeignKey = true)]
        public Product Product
        {
            get
            {
                return this.product.Entity;
            }
        
            set
            {
                Product previousValue = this.product.Entity;
                if (previousValue != value || !this.product.HasLoadedOrAssignedValue)
                {
                    this.SendPropertyChanging("Product");
        
                    if (previousValue != null)
                    {
                        this.product.Entity = null;
                        previousValue.Order_Details.Remove(this);
                    }
        
                    this.product.Entity = value;
        
                    if (value != null)
                    {
                        value.Order_Details.Add(this);
                        this.productID = value.ProductID;
                    }
                    else
                    {
                        this.productID = default(int);
                    }
        
                    this.SendPropertyChanged("Product");
                }
            }
        }
        
        protected virtual void SendPropertyChanging(string propertyName)
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
        
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Extensibility methods
        
        partial void OnCreated();
        
        partial void OnLoaded();
        
        partial void OnValidate(ChangeAction action);
        
        partial void OnOrderIDChanging(int value);
        
        partial void OnOrderIDChanged();
        
        partial void OnProductIDChanging(int value);
        
        partial void OnProductIDChanged();
        
        partial void OnUnitPriceChanging(decimal value);
        
        partial void OnUnitPriceChanged();
        
        partial void OnQuantityChanging(short value);
        
        partial void OnQuantityChanged();
        
        partial void OnDiscountChanging(float value);
        
        partial void OnDiscountChanged();
        
        #endregion
    }
}
