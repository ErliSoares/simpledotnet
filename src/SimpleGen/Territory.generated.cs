// <autogenerated>
//   This file was generated by T4 code generator DataClasses1.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

namespace Simple.Generator
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;

    [Table(Name = "dbo.Territories")]
    public partial class Territory : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private string territoryID;
        private string territoryDescription;
        private int regionID;
        private EntitySet<EmployeeTerritory> employeeTerritories;
        private EntityRef<Region> region;
        
        public Territory()
        {
            this.employeeTerritories = new EntitySet<EmployeeTerritory>(this.AttachEmployeeTerritories, this.DetachEmployeeTerritories);
            this.region = default(EntityRef<Region>);
            this.OnCreated();
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;

        [Column(Name = "TerritoryID", Storage = "territoryID", CanBeNull = false, DbType = "NVarChar(20) NOT NULL", IsPrimaryKey = true)]
        public string TerritoryID
        {
            get
            {
                return this.territoryID;
            }
        
            set
            {
                if (this.territoryID != value)
                {
                    this.OnTerritoryIDChanging(value);
                    this.SendPropertyChanging("TerritoryID");
                    this.territoryID = value;
                    this.SendPropertyChanged("TerritoryID");
                    this.OnTerritoryIDChanged();
                }
            }
        }

        [Column(Name = "TerritoryDescription", Storage = "territoryDescription", CanBeNull = false, DbType = "NChar(50) NOT NULL")]
        public string TerritoryDescription
        {
            get
            {
                return this.territoryDescription;
            }
        
            set
            {
                if (this.territoryDescription != value)
                {
                    this.OnTerritoryDescriptionChanging(value);
                    this.SendPropertyChanging("TerritoryDescription");
                    this.territoryDescription = value;
                    this.SendPropertyChanged("TerritoryDescription");
                    this.OnTerritoryDescriptionChanged();
                }
            }
        }

        [Column(Name = "RegionID", Storage = "regionID", CanBeNull = false, DbType = "Int NOT NULL")]
        public int RegionID
        {
            get
            {
                return this.regionID;
            }
        
            set
            {
                if (this.regionID != value)
                {
                    if (this.region.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnRegionIDChanging(value);
                    this.SendPropertyChanging("RegionID");
                    this.regionID = value;
                    this.SendPropertyChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }

        [Association(Name = "Territory_EmployeeTerritory", Storage = "employeeTerritories", ThisKey = "TerritoryID", OtherKey = "TerritoryID")]
        public EntitySet<EmployeeTerritory> EmployeeTerritories
        {
            get 
            {
                return this.employeeTerritories; 
            }
        
            set 
            { 
                this.employeeTerritories.Assign(value); 
            }
        }

        [Association(Name = "Region_Territory", Storage = "region", ThisKey = "RegionID", OtherKey = "RegionID", IsForeignKey = true)]
        public Region Region
        {
            get
            {
                return this.region.Entity;
            }
        
            set
            {
                Region previousValue = this.region.Entity;
                if (previousValue != value || !this.region.HasLoadedOrAssignedValue)
                {
                    this.SendPropertyChanging("Region");
        
                    if (previousValue != null)
                    {
                        this.region.Entity = null;
                        previousValue.Territories.Remove(this);
                    }
        
                    this.region.Entity = value;
        
                    if (value != null)
                    {
                        value.Territories.Add(this);
                        this.regionID = value.RegionID;
                    }
                    else
                    {
                        this.regionID = default(int);
                    }
        
                    this.SendPropertyChanged("Region");
                }
            }
        }
        
        protected virtual void SendPropertyChanging(string propertyName)
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
        
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        private void AttachEmployeeTerritories(EmployeeTerritory entity)
        {
            this.SendPropertyChanging("EmployeeTerritories");
            entity.Territory = this;
        }
        
        private void DetachEmployeeTerritories(EmployeeTerritory entity)
        {
            this.SendPropertyChanging("EmployeeTerritories");
            entity.Territory = null;
        }
        
        #region Extensibility methods
        
        partial void OnCreated();
        
        partial void OnLoaded();
        
        partial void OnValidate(ChangeAction action);
        
        partial void OnTerritoryIDChanging(string value);
        
        partial void OnTerritoryIDChanged();
        
        partial void OnTerritoryDescriptionChanging(string value);
        
        partial void OnTerritoryDescriptionChanged();
        
        partial void OnRegionIDChanging(int value);
        
        partial void OnRegionIDChanged();
        
        #endregion
    }
}
