// <autogenerated>
//   This file was generated by T4 code generator DataClasses1.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

namespace Simple.Generator
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;

    [Table(Name = "dbo.Employees")]
    public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private int employeeID;
        private string lastName;
        private string firstName;
        private string title;
        private string titleOfCourtesy;
        private DateTime? birthDate;
        private DateTime? hireDate;
        private string address;
        private string city;
        private string region;
        private string postalCode;
        private string country;
        private string homePhone;
        private string extension;
        private Binary photo;
        private string notes;
        private int? reportsTo;
        private string photoPath;
        private EntitySet<Employee> employees;
        private EntitySet<EmployeeTerritory> employeeTerritories;
        private EntitySet<Order> orders;
        private EntityRef<Employee> employee1;
        
        public Employee()
        {
            this.employees = new EntitySet<Employee>(this.AttachEmployees, this.DetachEmployees);
            this.employeeTerritories = new EntitySet<EmployeeTerritory>(this.AttachEmployeeTerritories, this.DetachEmployeeTerritories);
            this.orders = new EntitySet<Order>(this.AttachOrders, this.DetachOrders);
            this.employee1 = default(EntityRef<Employee>);
            this.OnCreated();
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;

        [Column(Name = "EmployeeID", Storage = "employeeID", CanBeNull = false, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmployeeID
        {
            get
            {
                return this.employeeID;
            }
        
            set
            {
                if (this.employeeID != value)
                {
                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging("EmployeeID");
                    this.employeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

        [Column(Name = "LastName", Storage = "lastName", CanBeNull = false, DbType = "NVarChar(20) NOT NULL")]
        public string LastName
        {
            get
            {
                return this.lastName;
            }
        
            set
            {
                if (this.lastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging("LastName");
                    this.lastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

        [Column(Name = "FirstName", Storage = "firstName", CanBeNull = false, DbType = "NVarChar(10) NOT NULL")]
        public string FirstName
        {
            get
            {
                return this.firstName;
            }
        
            set
            {
                if (this.firstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging("FirstName");
                    this.firstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }

        [Column(Name = "Title", Storage = "title", CanBeNull = true, DbType = "NVarChar(30)")]
        public string Title
        {
            get
            {
                return this.title;
            }
        
            set
            {
                if (this.title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging("Title");
                    this.title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [Column(Name = "TitleOfCourtesy", Storage = "titleOfCourtesy", CanBeNull = true, DbType = "NVarChar(25)")]
        public string TitleOfCourtesy
        {
            get
            {
                return this.titleOfCourtesy;
            }
        
            set
            {
                if (this.titleOfCourtesy != value)
                {
                    this.OnTitleOfCourtesyChanging(value);
                    this.SendPropertyChanging("TitleOfCourtesy");
                    this.titleOfCourtesy = value;
                    this.SendPropertyChanged("TitleOfCourtesy");
                    this.OnTitleOfCourtesyChanged();
                }
            }
        }

        [Column(Name = "BirthDate", Storage = "birthDate", CanBeNull = true, DbType = "DateTime")]
        public DateTime? BirthDate
        {
            get
            {
                return this.birthDate;
            }
        
            set
            {
                if (this.birthDate != value)
                {
                    this.OnBirthDateChanging(value);
                    this.SendPropertyChanging("BirthDate");
                    this.birthDate = value;
                    this.SendPropertyChanged("BirthDate");
                    this.OnBirthDateChanged();
                }
            }
        }

        [Column(Name = "HireDate", Storage = "hireDate", CanBeNull = true, DbType = "DateTime")]
        public DateTime? HireDate
        {
            get
            {
                return this.hireDate;
            }
        
            set
            {
                if (this.hireDate != value)
                {
                    this.OnHireDateChanging(value);
                    this.SendPropertyChanging("HireDate");
                    this.hireDate = value;
                    this.SendPropertyChanged("HireDate");
                    this.OnHireDateChanged();
                }
            }
        }

        [Column(Name = "Address", Storage = "address", CanBeNull = true, DbType = "NVarChar(60)")]
        public string Address
        {
            get
            {
                return this.address;
            }
        
            set
            {
                if (this.address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this.address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [Column(Name = "City", Storage = "city", CanBeNull = true, DbType = "NVarChar(15)")]
        public string City
        {
            get
            {
                return this.city;
            }
        
            set
            {
                if (this.city != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this.city = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

        [Column(Name = "Region", Storage = "region", CanBeNull = true, DbType = "NVarChar(15)")]
        public string Region
        {
            get
            {
                return this.region;
            }
        
            set
            {
                if (this.region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging("Region");
                    this.region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

        [Column(Name = "PostalCode", Storage = "postalCode", CanBeNull = true, DbType = "NVarChar(10)")]
        public string PostalCode
        {
            get
            {
                return this.postalCode;
            }
        
            set
            {
                if (this.postalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging("PostalCode");
                    this.postalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }

        [Column(Name = "Country", Storage = "country", CanBeNull = true, DbType = "NVarChar(15)")]
        public string Country
        {
            get
            {
                return this.country;
            }
        
            set
            {
                if (this.country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging("Country");
                    this.country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

        [Column(Name = "HomePhone", Storage = "homePhone", CanBeNull = true, DbType = "NVarChar(24)")]
        public string HomePhone
        {
            get
            {
                return this.homePhone;
            }
        
            set
            {
                if (this.homePhone != value)
                {
                    this.OnHomePhoneChanging(value);
                    this.SendPropertyChanging("HomePhone");
                    this.homePhone = value;
                    this.SendPropertyChanged("HomePhone");
                    this.OnHomePhoneChanged();
                }
            }
        }

        [Column(Name = "Extension", Storage = "extension", CanBeNull = true, DbType = "NVarChar(4)")]
        public string Extension
        {
            get
            {
                return this.extension;
            }
        
            set
            {
                if (this.extension != value)
                {
                    this.OnExtensionChanging(value);
                    this.SendPropertyChanging("Extension");
                    this.extension = value;
                    this.SendPropertyChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }

        [Column(Name = "Photo", Storage = "photo", CanBeNull = true, DbType = "Image", UpdateCheck = UpdateCheck.Never)]
        public Binary Photo
        {
            get
            {
                return this.photo;
            }
        
            set
            {
                if (this.photo != value)
                {
                    this.OnPhotoChanging(value);
                    this.SendPropertyChanging("Photo");
                    this.photo = value;
                    this.SendPropertyChanged("Photo");
                    this.OnPhotoChanged();
                }
            }
        }

        [Column(Name = "Notes", Storage = "notes", CanBeNull = true, DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this.notes;
            }
        
            set
            {
                if (this.notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging("Notes");
                    this.notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

        [Column(Name = "ReportsTo", Storage = "reportsTo", CanBeNull = true, DbType = "Int")]
        public int? ReportsTo
        {
            get
            {
                return this.reportsTo;
            }
        
            set
            {
                if (this.reportsTo != value)
                {
                    if (this.employee1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnReportsToChanging(value);
                    this.SendPropertyChanging("ReportsTo");
                    this.reportsTo = value;
                    this.SendPropertyChanged("ReportsTo");
                    this.OnReportsToChanged();
                }
            }
        }

        [Column(Name = "PhotoPath", Storage = "photoPath", CanBeNull = true, DbType = "NVarChar(255)")]
        public string PhotoPath
        {
            get
            {
                return this.photoPath;
            }
        
            set
            {
                if (this.photoPath != value)
                {
                    this.OnPhotoPathChanging(value);
                    this.SendPropertyChanging("PhotoPath");
                    this.photoPath = value;
                    this.SendPropertyChanged("PhotoPath");
                    this.OnPhotoPathChanged();
                }
            }
        }

        [Association(Name = "Employee_Employee", Storage = "employees", ThisKey = "EmployeeID", OtherKey = "ReportsTo")]
        public EntitySet<Employee> Employees
        {
            get 
            {
                return this.employees; 
            }
        
            set 
            { 
                this.employees.Assign(value); 
            }
        }

        [Association(Name = "Employee_EmployeeTerritory", Storage = "employeeTerritories", ThisKey = "EmployeeID", OtherKey = "EmployeeID")]
        public EntitySet<EmployeeTerritory> EmployeeTerritories
        {
            get 
            {
                return this.employeeTerritories; 
            }
        
            set 
            { 
                this.employeeTerritories.Assign(value); 
            }
        }

        [Association(Name = "Employee_Order", Storage = "orders", ThisKey = "EmployeeID", OtherKey = "EmployeeID")]
        public EntitySet<Order> Orders
        {
            get 
            {
                return this.orders; 
            }
        
            set 
            { 
                this.orders.Assign(value); 
            }
        }

        [Association(Name = "Employee_Employee", Storage = "employee1", ThisKey = "ReportsTo", OtherKey = "EmployeeID", IsForeignKey = true)]
        public Employee Employee1
        {
            get
            {
                return this.employee1.Entity;
            }
        
            set
            {
                Employee previousValue = this.employee1.Entity;
                if (previousValue != value || !this.employee1.HasLoadedOrAssignedValue)
                {
                    this.SendPropertyChanging("Employee1");
        
                    if (previousValue != null)
                    {
                        this.employee1.Entity = null;
                        previousValue.Employees.Remove(this);
                    }
        
                    this.employee1.Entity = value;
        
                    if (value != null)
                    {
                        value.Employees.Add(this);
                        this.reportsTo = value.EmployeeID;
                    }
                    else
                    {
                        this.reportsTo = default(int?);
                    }
        
                    this.SendPropertyChanged("Employee1");
                }
            }
        }
        
        protected virtual void SendPropertyChanging(string propertyName)
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
        
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        private void AttachEmployees(Employee entity)
        {
            this.SendPropertyChanging("Employees");
            entity.Employee1 = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            this.SendPropertyChanging("Employees");
            entity.Employee1 = null;
        }
        
        private void AttachEmployeeTerritories(EmployeeTerritory entity)
        {
            this.SendPropertyChanging("EmployeeTerritories");
            entity.Employee = this;
        }
        
        private void DetachEmployeeTerritories(EmployeeTerritory entity)
        {
            this.SendPropertyChanging("EmployeeTerritories");
            entity.Employee = null;
        }
        
        private void AttachOrders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Employee = this;
        }
        
        private void DetachOrders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Employee = null;
        }
        
        #region Extensibility methods
        
        partial void OnCreated();
        
        partial void OnLoaded();
        
        partial void OnValidate(ChangeAction action);
        
        partial void OnEmployeeIDChanging(int value);
        
        partial void OnEmployeeIDChanged();
        
        partial void OnLastNameChanging(string value);
        
        partial void OnLastNameChanged();
        
        partial void OnFirstNameChanging(string value);
        
        partial void OnFirstNameChanged();
        
        partial void OnTitleChanging(string value);
        
        partial void OnTitleChanged();
        
        partial void OnTitleOfCourtesyChanging(string value);
        
        partial void OnTitleOfCourtesyChanged();
        
        partial void OnBirthDateChanging(DateTime? value);
        
        partial void OnBirthDateChanged();
        
        partial void OnHireDateChanging(DateTime? value);
        
        partial void OnHireDateChanged();
        
        partial void OnAddressChanging(string value);
        
        partial void OnAddressChanged();
        
        partial void OnCityChanging(string value);
        
        partial void OnCityChanged();
        
        partial void OnRegionChanging(string value);
        
        partial void OnRegionChanged();
        
        partial void OnPostalCodeChanging(string value);
        
        partial void OnPostalCodeChanged();
        
        partial void OnCountryChanging(string value);
        
        partial void OnCountryChanged();
        
        partial void OnHomePhoneChanging(string value);
        
        partial void OnHomePhoneChanged();
        
        partial void OnExtensionChanging(string value);
        
        partial void OnExtensionChanged();
        
        partial void OnPhotoChanging(Binary value);
        
        partial void OnPhotoChanged();
        
        partial void OnNotesChanging(string value);
        
        partial void OnNotesChanged();
        
        partial void OnReportsToChanging(int? value);
        
        partial void OnReportsToChanged();
        
        partial void OnPhotoPathChanging(string value);
        
        partial void OnPhotoPathChanged();
        
        #endregion
    }
}
