#summary How to create your first project with Simple.NET
#labels Featured,Phase-Implementation,Phase-Support

= Introduction =

This wiki page will explain how to create a default-structured project with Simple.NET.

= Steps =

  * ==Create project structure==
  The first step is to create a solution with three projects: `ProjectName.BusinessInterface` (class library), `ProjectName.BusinessServer` (console application) and `ProjectName.UserInterface` (doesn't matter).

  * ==Add, to each project, the respective assembly references==
    # `BusinessInterface` must reference `SimpleLibraryCore` and `System.ServiceModel`;
    # `BusinessServer` must reference `SimpleLibraryCore`, `SimpleLibraryServer`, `NHibernate`, `log4net`, `BasicLibrary`, `System.ServiceModel` and, finally, `ProjectName.BusinessInterface`;
    # `UserInterface` must reference `SimpleLibraryCore` and `BusinessInterface`;
  
  * ==Then, for each business entity, do:==
    # Generate domain classes inside `ProjectName.BusinessInterface.Domain` with respective properties;
    # Generate entity mappings; (usually these two steps could be generated with a tool such MyGeneration)
    # Create dao class, that inherits from `BaseDao<Entity>`;
    # Create rules class, that inherits from `BaseRules<Entity, DaoClass>` and implements `IBaseRules<Entity>`;
  
  * ==Create the `BusinessServer` project starter.==
  A class with a `Main()` static method. This method should only contain this line:
{{{
MainController.Run(Assembly.GetExecutingAssembly());
}}}

  * ==Create configuration files==
    * Inside `BusinessServer` project.
      * `App.config`
{{{
<configuration>
  <system.serviceModel>
    <bindings>
      <wsHttpBinding>
        <binding name="_DefaultBinding" maxReceivedMessageSize="1048576">
          <readerQuotas maxDepth="32" maxStringContentLength="65535" maxArrayLength="16384"
            maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="None">
            <message negotiateServiceCredential="false" establishSecurityContext="false" />
          </security>
        </binding>
      </wsHttpBinding>
    </bindings>
  </system.serviceModel>
</configuration>
}}}
      * `SimpleLibrary.config`
{{{
<simpleLibrary>
  <business>
    <interfaceAssembly>ProjectName.BusinessInterface</interfaceAssembly>
    <serverAssembly>ProjectName.BusinessServer</serverAssembly>
  </business>
  <serviceModel>
    <defaultBaseAddress>http://localhost:9001/</defaultBaseAddress>
    <serviceConfigurator type="SimpleLibrary.ServiceModel.SingletonServiceConfigurator, SimpleLibraryCore"/>
    <serviceConfigurator type="SimpleLibrary.ServiceModel.ErrorBehaviorServiceConfigurator, SimpleLibraryCore"/>
    <serviceConfigurator type="SimpleLibrary.ServiceModel.DebugServiceConfigurator, SimpleLibraryCore" enabled="true"/>
    <serviceConfigurator type="SimpleLibrary.ServiceModel.MetadataBehaviorServiceConfigurator, SimpleLibraryCore">
      <address>mex</address>
      <httpGetEnabled>true</httpGetEnabled>
    </serviceConfigurator>

    <defaultEndpoint>
      <bindingNameRef>_DefaultBinding</bindingNameRef>
      <bindingType>System.ServiceModel.WSHttpBinding, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</bindingType>
      <address></address>

      <endpointConfigurator type="SimpleLibrary.ServiceModel.DataContractConfigurator, SimpleLibraryCore"/>
      <endpointConfigurator type="SimpleLibrary.ServiceModel.DefaultFaultsConfigurator, SimpleLibraryCore"/>
    </defaultEndpoint>

    <additionalEndpoints/>
  </serviceModel>
  <dataConfig>
    <nhibernateConfigFile>NHibernate.config</nhibernateConfigFile>
  </dataConfig>
</simpleLibrary>
}}}
      * `NHibernate.config`
{{{
<hibernate-configuration xmlns="urn:nhibernate-configuration-2.2">
  <session-factory>
    <property name="connection.provider">NHibernate.Connection.DriverConnectionProvider</property>
    <property name="connection.driver_class">NHibernate.Driver.SqlClientDriver</property>
    <property name="connection.connection_string">Data Source=localhost\SQLEXPRESS;Integrated Security=true;DataBase=SimpleORMSample</property>
    <property name="dialect">NHibernate.Dialect.MsSql2000Dialect</property>
    <property name="show_sql">false</property>
    <property name="use_outer_join">true</property>
    <mapping assembly="ProjectName.BusinessServer" />
  </session-factory>
</hibernate-configuration>
}}}

*That's ok. Now you project should be able to run. Remember to run either `UserInterface` and `BusinessServer` projects.*