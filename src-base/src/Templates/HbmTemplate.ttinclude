<#@ Import Namespace="System.Data" #>
<#@ Import Namespace="System.Data.Common" #>
<#+
// <copyright file="nHibernateMappingTemplate.tt" company="Data.Common.DbSchema">
//
//  Data.Common.DbSchema - http://dbschema.codeplex.com
//
//  The contents of this file are subject to the New BSD
//  License (the "License"); you may not use this file
//  except in compliance with the License. You may obtain a copy of
//  the License at http://www.opensource.org/licenses/bsd-license.php
//
//  Software distributed under the License is distributed on an 
//  "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
//  implied. See the License for the specific language governing
//  rights and limitations under the License.
//
// </copyright>

public class HbmTemplate : TableTemplate
{
	public string EntityNamespace { get; set; }

	
    protected override void RenderCore()
    {
        string fullTableName = this.Schema.QualifiedTableName(this.TableSchema, this.TableName);
#>
<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" namespace="<#=this.EntityNamespace #>" assembly="<#=this.AssemblyName #>">
    <class name="<#=this.EntityNamespace #>.<#=this.TableClassName #>, <#=this.AssemblyName #>" table="<#=fullTableName #>" lazy="true">
<#+
        if (this.TablePrimaryKeys.Rows.Count > 1)
        {
#>
        <composite-id>
<#+
            foreach (DataRow primaryKeyRow in this.TablePrimaryKeys.Rows)
            {
                Type columnType = (Type)primaryKeyRow["DataType"];
                string nhibernateType = this.GetNHibernateType(columnType.ToString());
                string columnName = primaryKeyRow["ColumnName"].ToString();
                string columnPropertyName = Utilities.CleanUp(columnName);
#>
            <key-property name="<#=columnPropertyName #>" type="<#=nhibernateType #>" column="<#=columnName #>" />
<#+
            }
#>
        </composite-id>
<#+
        }
        else if (this.TablePrimaryKeys.Rows.Count == 1)
        {
            DataRow primaryKeyRow = this.TablePrimaryKeys.Rows[0];
            Type columnType = (Type)primaryKeyRow["DataType"];
            string nhibernateType = this.GetNHibernateType(columnType.ToString());
            string columnName = primaryKeyRow["ColumnName"].ToString();
            string columnPropertyName = Utilities.CleanUp(columnName);

            if (nhibernateType == "String")
            {
                int columnLength = (int)primaryKeyRow["ColumnSize"];
#>
        <id name="<#=columnPropertyName #>" type="<#=nhibernateType #>">
            <column name="<#=columnName #>" length="<#=columnLength #>" not-null="false" unique="true" />
            <generator class="assigned" />
        </id>
<#+
            }
            else if (nhibernateType == "Guid")
            {
#>
        <id name="<#=columnPropertyName #>" type="<#=nhibernateType #>">
            <column name="<#=columnName #>" not-null="false" unique="true" />
            <generator class="uuid.hex" />
        </id>
<#+
            }
            else
            {
#>
        <id name="<#=columnPropertyName #>" type="<#=nhibernateType #>">
            <column name="<#=columnName #>" not-null="false" unique="true" />
            <generator class="native" />
        </id>
<#+
            }
        }

        foreach (DataRow columnRow in this.TableFields.Rows)
        {
            bool IsNullable = !(bool)columnRow["AllowDBNull"];
            Type columnType = (Type)columnRow["DataType"];
            string nhibernateType = this.GetNHibernateType(columnType.ToString());
            string columnName = columnRow["ColumnName"].ToString();
            string columnPropertyName = Utilities.CleanUp(columnName);
            string columnLength = string.Empty;
            if (nhibernateType == "String")
                columnLength = string.Format(" length=\"{0}\"", (int)columnRow["ColumnSize"]);
#>
        <property name="<#=columnPropertyName #>" type="<#=nhibernateType #>">
            <column name="<#=columnName #>"<#=columnLength #> not-null="<#=IsNullable.ToString().ToLower() #>" />
        </property>
<#+
        }

/*        foreach (DataRow columnRow in this.TableOneToManyRelations.Rows)
        {
            string columnName = columnRow["PK_COLUMN_NAME"].ToString();
            string columnPropertyName = Utilities.CleanUp(columnName);
            string tableName = columnRow["FK_TABLE_NAME"].ToString();
            string tableClassName = Inflector.MakeSingular(Utilities.CleanUp(tableName));
            string relationName = Inflector.MakePlural(Utilities.CleanUp(tableName));
#>
        <bag name="<#=relationName #>" lazy="true" inverse="true" cascade="all-delete-orphan">
            <key column="<#=columnName #>" />
            <one-to-many class="<#=tableClassName #>" />
        </bag>
<#+
}*/

        foreach (DataRow columnRow in this.TableManyToOneRelations.Rows)
        {
            string columnName = columnRow["FK_COLUMN_NAME"].ToString();
            string columnPropertyName = Utilities.CleanUp(columnName);
            string tableName = columnRow["PK_TABLE_NAME"].ToString();
            string tableClassName = Inflector.MakeSingular(Utilities.CleanUp(tableName));
            string relationName = tableClassName;
            if (this.TableClassName == relationName)
                relationName += "Member";
#>
        <many-to-one name="<#=relationName #>" column="<#=columnPropertyName #>" class="<#=tableClassName #>" not-null="true" />
<#+
}

/*        foreach (DataRow relationRow in this.TableManyToManyRelations.Rows)
        {
            string fkTableSchema = Utilities.CleanNullOrEmpty(relationRow["FK_TABLE_SCHEMA"]);
            string fkTableName = relationRow["FK_TABLE_NAME"].ToString();
            string fkColumn = relationRow["FK_COLUMN_NAME"].ToString();
            DataTable otherManyToManyRelations = this.Schema.GetTableManyToOneRelations(fkTableSchema, fkTableName);
            foreach (DataRow manytomanyRow in otherManyToManyRelations.Rows)
            {
                string otherTableSchema = Utilities.CleanNullOrEmpty(manytomanyRow["PK_TABLE_SCHEMA"]);
                string otherTableName = manytomanyRow["PK_TABLE_NAME"].ToString();
                string otherColumn = manytomanyRow["PK_COLUMN_NAME"].ToString();
                if (this.TableNameHash(this.TableSchema, this.TableName) != this.TableNameHash(otherTableSchema, otherTableName))
                {
                    string className = Inflector.MakeSingular(Utilities.CleanUp(otherTableName));
                    string relationName = Inflector.MakePlural(Utilities.CleanUp(otherTableName));
#>
        <set name="<#=relationName #>" table="<#=fkTableName #>" lazy="true" inverse="true">
            <key column="<#=fkColumn #>" />
            <many-to-many class="<#=className #>" column="<#=otherColumn #>" />
        </set>
<#+
                }
            }
        }*/
#>
    </class>
</hibernate-mapping>
<#+
    }
}
#>