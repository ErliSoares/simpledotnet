<#@ Import Namespace="System.Data" #>
<#@ Import Namespace="System.Data.Common" #>
<#+
// <copyright file="nHibernatePOCOsTemplate.tt" company="Data.Common.DbSchema">
//
//  Data.Common.DbSchema - http://dbschema.codeplex.com
//
//  The contents of this file are subject to the New BSD
//  License (the "License"); you may not use this file
//  except in compliance with the License. You may obtain a copy of
//  the License at http://www.opensource.org/licenses/bsd-license.php
//
//  Software distributed under the License is distributed on an 
//  "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
//  implied. See the License for the specific language governing
//  rights and limitations under the License.
//
// </copyright>

public class EntityTemplate : TableTemplate
{
	public string EntityNamespace { get; set; }
	public string ServiceNamespace { get; set; }
	public string BaseClassTemplate { get; set; }
	
	public EntityTemplate() 
	{
		BaseClassTemplate = "Simple.Entities.Entity<%s,I%sService>";
	}
	
    protected override void RenderCore()
    {
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using <#= this.ServiceNamespace #>;

namespace <#=this.EntityNamespace #>
{
	[Serializable]
    public partial class <#=this.TableClassName #> : <#= this.BaseClassTemplate.Replace("%s", this.TableClassName) #>
    {
        public <#=this.TableClassName #>()
        {  }

<#+
        foreach (DataRow columnRow in this.TablePrimaryKeys.Rows)
        {
            Type columnType = (Type)columnRow["DataType"];
            bool IsNullable = (bool)columnRow["AllowDBNull"];
            string systemType = this.Schema.GetPropertyType(columnType.ToString(), IsNullable);
            string columnPropertyName = Utilities.CleanUp(columnRow["ColumnName"].ToString());
#>
        // Primary Key
        public virtual <#=systemType #> <#=columnPropertyName #> { get; set ; }

<#+
        }

        foreach (DataRow columnRow in this.TableFields.Rows)
        {
            Type columnType = (Type)columnRow["DataType"];
            bool IsNullable = (bool)columnRow["AllowDBNull"];
            string systemType = Schema.GetPropertyType(columnType.ToString(), IsNullable);
            string columnPropertyName = Utilities.CleanUp(columnRow["ColumnName"].ToString());
#>
        public virtual <#=systemType #> <#=columnPropertyName #> { get; set ; }
<#+
        }
		
		foreach (DataRow columnRow in this.TableManyToOneRelations.Rows)
        {
            string tableName = columnRow["PK_TABLE_NAME"].ToString();
            string className = Inflector.MakeSingular(Utilities.CleanUp(tableName));
            string propertyName = Inflector.MakeSingular(Utilities.CleanUp(tableName));
            if (propertyName == this.TableClassName)
                propertyName += "Member";
#>
        // Many-To-One Relation
        public virtual <#=className #> <#=propertyName #> { get; set; }
<#+
        }

/*        foreach (DataRow columnRow in this.TableOneToManyRelations.Rows)
        {
            string tableName = columnRow["FK_TABLE_NAME"].ToString();
            string className = Inflector.MakeSingular(Utilities.CleanUp(tableName));
            string propertyName = Inflector.MakePlural(Utilities.CleanUp(tableName));
#>
        // One-To-Many Relation
        private IList<<#=className #>> _<#=propertyName #> = new List<<#=className #>>();
        public virtual IList<<#=className #>> <#=propertyName #>
        {
            get{ return _<#=propertyName #>; }
            set{ _<#=propertyName #> = value; }
        }

<#+
        }*/

       
/*
        foreach (DataRow relationRow in this.TableManyToManyRelations.Rows)
        {
            string fkTableSchema = Utilities.CleanNullOrEmpty(relationRow["FK_TABLE_SCHEMA"]);
            string fkTableName = relationRow["FK_TABLE_NAME"].ToString();
            DataTable otherManyToManyRelations = this.Schema.GetTableManyToOneRelations(fkTableSchema, fkTableName);
            foreach (DataRow manytomanyRow in otherManyToManyRelations.Rows)
            {
                string otherTableSchema = Utilities.CleanNullOrEmpty(manytomanyRow["PK_TABLE_SCHEMA"]);
                string otherTableName = manytomanyRow["PK_TABLE_NAME"].ToString();
                if (this.TableNameHash(this.TableSchema, this.TableName) != this.TableNameHash(otherTableSchema, otherTableName))
                {
                    string className = Inflector.MakeSingular(Utilities.CleanUp(otherTableName));
                    string propertyName = Inflector.MakePlural(Utilities.CleanUp(otherTableName));
#>
        // Many-To-Many Relation
        private IList<<#=className #>> _<#=propertyName #> = new List<<#=className #>>();
        public virtual IList<<#=className #>> <#=propertyName #>
        {
            get{ return _<#=propertyName #>; }
            set{ _<#=propertyName #> = value; }
        }

<#+

                }
            }
        }*/
#>

<#+
        if (this.TablePrimaryKeys.Rows.Count > 1)
        {
#>
        #region ' Overrides '

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            return base.Equals(obj);
        }

        #endregion
<#+
        }
#>
    }
}
<#+
    }
}
#>