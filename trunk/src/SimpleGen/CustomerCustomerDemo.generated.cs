// <autogenerated>
//   This file was generated by T4 code generator DataClasses1.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

namespace Simple.Generator
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;

    [Table(Name = "dbo.CustomerCustomerDemo")]
    public partial class CustomerCustomerDemo : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private string customerID;
        private string customerTypeID;
        private EntityRef<CustomerDemographic> customerDemographic;
        private EntityRef<Customer> customer;
        
        public CustomerCustomerDemo()
        {
            this.customerDemographic = default(EntityRef<CustomerDemographic>);
            this.customer = default(EntityRef<Customer>);
            this.OnCreated();
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;

        [Column(Name = "CustomerID", Storage = "customerID", CanBeNull = false, DbType = "NChar(5) NOT NULL", IsPrimaryKey = true)]
        public string CustomerID
        {
            get
            {
                return this.customerID;
            }
        
            set
            {
                if (this.customerID != value)
                {
                    if (this.customer.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging("CustomerID");
                    this.customerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

        [Column(Name = "CustomerTypeID", Storage = "customerTypeID", CanBeNull = false, DbType = "NChar(10) NOT NULL", IsPrimaryKey = true)]
        public string CustomerTypeID
        {
            get
            {
                return this.customerTypeID;
            }
        
            set
            {
                if (this.customerTypeID != value)
                {
                    if (this.customerDemographic.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCustomerTypeIDChanging(value);
                    this.SendPropertyChanging("CustomerTypeID");
                    this.customerTypeID = value;
                    this.SendPropertyChanged("CustomerTypeID");
                    this.OnCustomerTypeIDChanged();
                }
            }
        }

        [Association(Name = "CustomerDemographic_CustomerCustomerDemo", Storage = "customerDemographic", ThisKey = "CustomerTypeID", OtherKey = "CustomerTypeID", IsForeignKey = true)]
        public CustomerDemographic CustomerDemographic
        {
            get
            {
                return this.customerDemographic.Entity;
            }
        
            set
            {
                CustomerDemographic previousValue = this.customerDemographic.Entity;
                if (previousValue != value || !this.customerDemographic.HasLoadedOrAssignedValue)
                {
                    this.SendPropertyChanging("CustomerDemographic");
        
                    if (previousValue != null)
                    {
                        this.customerDemographic.Entity = null;
                        previousValue.CustomerCustomerDemos.Remove(this);
                    }
        
                    this.customerDemographic.Entity = value;
        
                    if (value != null)
                    {
                        value.CustomerCustomerDemos.Add(this);
                        this.customerTypeID = value.CustomerTypeID;
                    }
                    else
                    {
                        this.customerTypeID = default(string);
                    }
        
                    this.SendPropertyChanged("CustomerDemographic");
                }
            }
        }

        [Association(Name = "Customer_CustomerCustomerDemo", Storage = "customer", ThisKey = "CustomerID", OtherKey = "CustomerID", IsForeignKey = true)]
        public Customer Customer
        {
            get
            {
                return this.customer.Entity;
            }
        
            set
            {
                Customer previousValue = this.customer.Entity;
                if (previousValue != value || !this.customer.HasLoadedOrAssignedValue)
                {
                    this.SendPropertyChanging("Customer");
        
                    if (previousValue != null)
                    {
                        this.customer.Entity = null;
                        previousValue.CustomerCustomerDemos.Remove(this);
                    }
        
                    this.customer.Entity = value;
        
                    if (value != null)
                    {
                        value.CustomerCustomerDemos.Add(this);
                        this.customerID = value.CustomerID;
                    }
                    else
                    {
                        this.customerID = default(string);
                    }
        
                    this.SendPropertyChanged("Customer");
                }
            }
        }
        
        protected virtual void SendPropertyChanging(string propertyName)
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
        
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Extensibility methods
        
        partial void OnCreated();
        
        partial void OnLoaded();
        
        partial void OnValidate(ChangeAction action);
        
        partial void OnCustomerIDChanging(string value);
        
        partial void OnCustomerIDChanged();
        
        partial void OnCustomerTypeIDChanging(string value);
        
        partial void OnCustomerTypeIDChanged();
        
        #endregion
    }
}
