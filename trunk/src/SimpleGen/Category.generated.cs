// <autogenerated>
//   This file was generated by T4 code generator DataClasses1.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

namespace Simple.Generator
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;

    [Table(Name = "dbo.Categories")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private int categoryID;
        private string categoryName;
        private string description;
        private Binary picture;
        private EntitySet<Product> products;
        
        public Category()
        {
            this.products = new EntitySet<Product>(this.AttachProducts, this.DetachProducts);
            this.OnCreated();
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;

        [Column(Name = "CategoryID", Storage = "categoryID", CanBeNull = false, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CategoryID
        {
            get
            {
                return this.categoryID;
            }
        
            set
            {
                if (this.categoryID != value)
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging("CategoryID");
                    this.categoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

        [Column(Name = "CategoryName", Storage = "categoryName", CanBeNull = false, DbType = "NVarChar(15) NOT NULL")]
        public string CategoryName
        {
            get
            {
                return this.categoryName;
            }
        
            set
            {
                if (this.categoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging("CategoryName");
                    this.categoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }

        [Column(Name = "Description", Storage = "description", CanBeNull = true, DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this.description;
            }
        
            set
            {
                if (this.description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this.description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [Column(Name = "Picture", Storage = "picture", CanBeNull = true, DbType = "Image", UpdateCheck = UpdateCheck.Never)]
        public Binary Picture
        {
            get
            {
                return this.picture;
            }
        
            set
            {
                if (this.picture != value)
                {
                    this.OnPictureChanging(value);
                    this.SendPropertyChanging("Picture");
                    this.picture = value;
                    this.SendPropertyChanged("Picture");
                    this.OnPictureChanged();
                }
            }
        }

        [Association(Name = "Category_Product", Storage = "products", ThisKey = "CategoryID", OtherKey = "CategoryID")]
        public EntitySet<Product> Products
        {
            get 
            {
                return this.products; 
            }
        
            set 
            { 
                this.products.Assign(value); 
            }
        }
        
        protected virtual void SendPropertyChanging(string propertyName)
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
        
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        private void AttachProducts(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Category = this;
        }
        
        private void DetachProducts(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Category = null;
        }
        
        #region Extensibility methods
        
        partial void OnCreated();
        
        partial void OnLoaded();
        
        partial void OnValidate(ChangeAction action);
        
        partial void OnCategoryIDChanging(int value);
        
        partial void OnCategoryIDChanged();
        
        partial void OnCategoryNameChanging(string value);
        
        partial void OnCategoryNameChanged();
        
        partial void OnDescriptionChanging(string value);
        
        partial void OnDescriptionChanged();
        
        partial void OnPictureChanging(Binary value);
        
        partial void OnPictureChanged();
        
        #endregion
    }
}
