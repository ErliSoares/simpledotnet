// <autogenerated>
//   This file was generated by T4 code generator DataClasses1.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

namespace Simple.Generator
{
    using System;
    using System.ComponentModel;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;

    [Table(Name = "dbo.Orders")]
    public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private int orderID;
        private string customerID;
        private int? employeeID;
        private DateTime? orderDate;
        private DateTime? requiredDate;
        private DateTime? shippedDate;
        private int? shipVia;
        private decimal? freight;
        private string shipName;
        private string shipAddress;
        private string shipCity;
        private string shipRegion;
        private string shipPostalCode;
        private string shipCountry;
        private EntitySet<Order_Detail> order_Details;
        private EntityRef<Customer> customer;
        private EntityRef<Employee> employee;
        private EntityRef<Shipper> shipper;
        
        public Order()
        {
            this.order_Details = new EntitySet<Order_Detail>(this.AttachOrder_Details, this.DetachOrder_Details);
            this.customer = default(EntityRef<Customer>);
            this.employee = default(EntityRef<Employee>);
            this.shipper = default(EntityRef<Shipper>);
            this.OnCreated();
        }
        
        public event PropertyChangingEventHandler PropertyChanging;
        
        public event PropertyChangedEventHandler PropertyChanged;

        [Column(Name = "OrderID", Storage = "orderID", CanBeNull = false, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrderID
        {
            get
            {
                return this.orderID;
            }
        
            set
            {
                if (this.orderID != value)
                {
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging("OrderID");
                    this.orderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }

        [Column(Name = "CustomerID", Storage = "customerID", CanBeNull = true, DbType = "NChar(5)")]
        public string CustomerID
        {
            get
            {
                return this.customerID;
            }
        
            set
            {
                if (this.customerID != value)
                {
                    if (this.customer.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging("CustomerID");
                    this.customerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

        [Column(Name = "EmployeeID", Storage = "employeeID", CanBeNull = true, DbType = "Int")]
        public int? EmployeeID
        {
            get
            {
                return this.employeeID;
            }
        
            set
            {
                if (this.employeeID != value)
                {
                    if (this.employee.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging("EmployeeID");
                    this.employeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

        [Column(Name = "OrderDate", Storage = "orderDate", CanBeNull = true, DbType = "DateTime")]
        public DateTime? OrderDate
        {
            get
            {
                return this.orderDate;
            }
        
            set
            {
                if (this.orderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging("OrderDate");
                    this.orderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }

        [Column(Name = "RequiredDate", Storage = "requiredDate", CanBeNull = true, DbType = "DateTime")]
        public DateTime? RequiredDate
        {
            get
            {
                return this.requiredDate;
            }
        
            set
            {
                if (this.requiredDate != value)
                {
                    this.OnRequiredDateChanging(value);
                    this.SendPropertyChanging("RequiredDate");
                    this.requiredDate = value;
                    this.SendPropertyChanged("RequiredDate");
                    this.OnRequiredDateChanged();
                }
            }
        }

        [Column(Name = "ShippedDate", Storage = "shippedDate", CanBeNull = true, DbType = "DateTime")]
        public DateTime? ShippedDate
        {
            get
            {
                return this.shippedDate;
            }
        
            set
            {
                if (this.shippedDate != value)
                {
                    this.OnShippedDateChanging(value);
                    this.SendPropertyChanging("ShippedDate");
                    this.shippedDate = value;
                    this.SendPropertyChanged("ShippedDate");
                    this.OnShippedDateChanged();
                }
            }
        }

        [Column(Name = "ShipVia", Storage = "shipVia", CanBeNull = true, DbType = "Int")]
        public int? ShipVia
        {
            get
            {
                return this.shipVia;
            }
        
            set
            {
                if (this.shipVia != value)
                {
                    if (this.shipper.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnShipViaChanging(value);
                    this.SendPropertyChanging("ShipVia");
                    this.shipVia = value;
                    this.SendPropertyChanged("ShipVia");
                    this.OnShipViaChanged();
                }
            }
        }

        [Column(Name = "Freight", Storage = "freight", CanBeNull = true, DbType = "Money")]
        public decimal? Freight
        {
            get
            {
                return this.freight;
            }
        
            set
            {
                if (this.freight != value)
                {
                    this.OnFreightChanging(value);
                    this.SendPropertyChanging("Freight");
                    this.freight = value;
                    this.SendPropertyChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }

        [Column(Name = "ShipName", Storage = "shipName", CanBeNull = true, DbType = "NVarChar(40)")]
        public string ShipName
        {
            get
            {
                return this.shipName;
            }
        
            set
            {
                if (this.shipName != value)
                {
                    this.OnShipNameChanging(value);
                    this.SendPropertyChanging("ShipName");
                    this.shipName = value;
                    this.SendPropertyChanged("ShipName");
                    this.OnShipNameChanged();
                }
            }
        }

        [Column(Name = "ShipAddress", Storage = "shipAddress", CanBeNull = true, DbType = "NVarChar(60)")]
        public string ShipAddress
        {
            get
            {
                return this.shipAddress;
            }
        
            set
            {
                if (this.shipAddress != value)
                {
                    this.OnShipAddressChanging(value);
                    this.SendPropertyChanging("ShipAddress");
                    this.shipAddress = value;
                    this.SendPropertyChanged("ShipAddress");
                    this.OnShipAddressChanged();
                }
            }
        }

        [Column(Name = "ShipCity", Storage = "shipCity", CanBeNull = true, DbType = "NVarChar(15)")]
        public string ShipCity
        {
            get
            {
                return this.shipCity;
            }
        
            set
            {
                if (this.shipCity != value)
                {
                    this.OnShipCityChanging(value);
                    this.SendPropertyChanging("ShipCity");
                    this.shipCity = value;
                    this.SendPropertyChanged("ShipCity");
                    this.OnShipCityChanged();
                }
            }
        }

        [Column(Name = "ShipRegion", Storage = "shipRegion", CanBeNull = true, DbType = "NVarChar(15)")]
        public string ShipRegion
        {
            get
            {
                return this.shipRegion;
            }
        
            set
            {
                if (this.shipRegion != value)
                {
                    this.OnShipRegionChanging(value);
                    this.SendPropertyChanging("ShipRegion");
                    this.shipRegion = value;
                    this.SendPropertyChanged("ShipRegion");
                    this.OnShipRegionChanged();
                }
            }
        }

        [Column(Name = "ShipPostalCode", Storage = "shipPostalCode", CanBeNull = true, DbType = "NVarChar(10)")]
        public string ShipPostalCode
        {
            get
            {
                return this.shipPostalCode;
            }
        
            set
            {
                if (this.shipPostalCode != value)
                {
                    this.OnShipPostalCodeChanging(value);
                    this.SendPropertyChanging("ShipPostalCode");
                    this.shipPostalCode = value;
                    this.SendPropertyChanged("ShipPostalCode");
                    this.OnShipPostalCodeChanged();
                }
            }
        }

        [Column(Name = "ShipCountry", Storage = "shipCountry", CanBeNull = true, DbType = "NVarChar(15)")]
        public string ShipCountry
        {
            get
            {
                return this.shipCountry;
            }
        
            set
            {
                if (this.shipCountry != value)
                {
                    this.OnShipCountryChanging(value);
                    this.SendPropertyChanging("ShipCountry");
                    this.shipCountry = value;
                    this.SendPropertyChanged("ShipCountry");
                    this.OnShipCountryChanged();
                }
            }
        }

        [Association(Name = "Order_Order_Detail", Storage = "order_Details", ThisKey = "OrderID", OtherKey = "OrderID")]
        public EntitySet<Order_Detail> Order_Details
        {
            get 
            {
                return this.order_Details; 
            }
        
            set 
            { 
                this.order_Details.Assign(value); 
            }
        }

        [Association(Name = "Customer_Order", Storage = "customer", ThisKey = "CustomerID", OtherKey = "CustomerID", IsForeignKey = true)]
        public Customer Customer
        {
            get
            {
                return this.customer.Entity;
            }
        
            set
            {
                Customer previousValue = this.customer.Entity;
                if (previousValue != value || !this.customer.HasLoadedOrAssignedValue)
                {
                    this.SendPropertyChanging("Customer");
        
                    if (previousValue != null)
                    {
                        this.customer.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
        
                    this.customer.Entity = value;
        
                    if (value != null)
                    {
                        value.Orders.Add(this);
                        this.customerID = value.CustomerID;
                    }
                    else
                    {
                        this.customerID = default(string);
                    }
        
                    this.SendPropertyChanged("Customer");
                }
            }
        }

        [Association(Name = "Employee_Order", Storage = "employee", ThisKey = "EmployeeID", OtherKey = "EmployeeID", IsForeignKey = true)]
        public Employee Employee
        {
            get
            {
                return this.employee.Entity;
            }
        
            set
            {
                Employee previousValue = this.employee.Entity;
                if (previousValue != value || !this.employee.HasLoadedOrAssignedValue)
                {
                    this.SendPropertyChanging("Employee");
        
                    if (previousValue != null)
                    {
                        this.employee.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
        
                    this.employee.Entity = value;
        
                    if (value != null)
                    {
                        value.Orders.Add(this);
                        this.employeeID = value.EmployeeID;
                    }
                    else
                    {
                        this.employeeID = default(int?);
                    }
        
                    this.SendPropertyChanged("Employee");
                }
            }
        }

        [Association(Name = "Shipper_Order", Storage = "shipper", ThisKey = "ShipVia", OtherKey = "ShipperID", IsForeignKey = true)]
        public Shipper Shipper
        {
            get
            {
                return this.shipper.Entity;
            }
        
            set
            {
                Shipper previousValue = this.shipper.Entity;
                if (previousValue != value || !this.shipper.HasLoadedOrAssignedValue)
                {
                    this.SendPropertyChanging("Shipper");
        
                    if (previousValue != null)
                    {
                        this.shipper.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
        
                    this.shipper.Entity = value;
        
                    if (value != null)
                    {
                        value.Orders.Add(this);
                        this.shipVia = value.ShipperID;
                    }
                    else
                    {
                        this.shipVia = default(int?);
                    }
        
                    this.SendPropertyChanged("Shipper");
                }
            }
        }
        
        protected virtual void SendPropertyChanging(string propertyName)
        {
            if (this.PropertyChanging != null)
            {
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
        
        protected virtual void SendPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        private void AttachOrder_Details(Order_Detail entity)
        {
            this.SendPropertyChanging("Order_Details");
            entity.Order = this;
        }
        
        private void DetachOrder_Details(Order_Detail entity)
        {
            this.SendPropertyChanging("Order_Details");
            entity.Order = null;
        }
        
        #region Extensibility methods
        
        partial void OnCreated();
        
        partial void OnLoaded();
        
        partial void OnValidate(ChangeAction action);
        
        partial void OnOrderIDChanging(int value);
        
        partial void OnOrderIDChanged();
        
        partial void OnCustomerIDChanging(string value);
        
        partial void OnCustomerIDChanged();
        
        partial void OnEmployeeIDChanging(int? value);
        
        partial void OnEmployeeIDChanged();
        
        partial void OnOrderDateChanging(DateTime? value);
        
        partial void OnOrderDateChanged();
        
        partial void OnRequiredDateChanging(DateTime? value);
        
        partial void OnRequiredDateChanged();
        
        partial void OnShippedDateChanging(DateTime? value);
        
        partial void OnShippedDateChanged();
        
        partial void OnShipViaChanging(int? value);
        
        partial void OnShipViaChanged();
        
        partial void OnFreightChanging(decimal? value);
        
        partial void OnFreightChanged();
        
        partial void OnShipNameChanging(string value);
        
        partial void OnShipNameChanged();
        
        partial void OnShipAddressChanging(string value);
        
        partial void OnShipAddressChanged();
        
        partial void OnShipCityChanging(string value);
        
        partial void OnShipCityChanged();
        
        partial void OnShipRegionChanging(string value);
        
        partial void OnShipRegionChanged();
        
        partial void OnShipPostalCodeChanging(string value);
        
        partial void OnShipPostalCodeChanged();
        
        partial void OnShipCountryChanging(string value);
        
        partial void OnShipCountryChanged();
        
        #endregion
    }
}
